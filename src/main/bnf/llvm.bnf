{

  parserClass="io.vypa.llvm.parser.LLVMParser"
  parserUtilClass="io.vypa.llvm.parser.LLVMParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="LLVM"
  psiImplClassSuffix="Impl"
  psiPackage="io.vypa.llvm.psi"
  psiImplPackage="io.vypa.llvm.psi.impl"

  elementTypeHolderClass="io.vypa.llvm.psi.LLVMTypes"
  elementTypeClass="io.vypa.llvm.psi.LLVMElementType"
  tokenTypeClass="io.vypa.llvm.psi.LLVMTokenType"
  extends("PrimitiveType|UserDefinedType|ArrayType|StructureType|PackedStructureType|VectorType|PointerType|FunctionType|AddressSpaceType")   = Type

  tokens=[
        keyword             =   'regexp:acq_rel|acquire|add|addrspace|addrspacecast|alias|align|alignstack|alloca|alwaysinline|and|any|anyregcc|appending|arcp|argmemonly|arm_aapcs_vfpcc|arm_aapcscc|arm_apcscc|ashr|asm|atomic|atomicrmw|available_externally|bitcast|blockaddress|br|builtin|byval|call|catch|catchpad|catchret|catchswitch|ccc|clause|cleanup|cleanuppad|cleanupret|cmpxchg|cold|coldcc|comdat|common|constant|convergent|cxx_fast_tlscc|datalayout|distinct|declare|default|define|deplibs|dereferenceable|dereferenceable_or_null|dllexport|dllimport|double|eq|exact|exactmatch|extern_weak|external|externally_initialized|extractelement|extractvalue|fadd|false|false|fast|fastcc|fcmp|fdiv|fence|filter|float|fmul|fp128|fpext|fpext|fptosi|fptoui|fptrunc|frem|from|fsub|gc|getelementptr|ghccc|global|half|hhvm_ccc|hhvmcc|hidden|icmp|inaccessiblemem_or_argmemonly|inaccessiblememonly|inalloca|inbounds|indirectbr|initialexec|inlinehint|inreg|insertelement|insertvalue|intel_ocl_bicc|inteldialect|internal|inttoptr|invoke|jumptable|landingpad|largest|linkonce|linkonce_odr|load|localdynamic|localexec|lshr|max|metadata|min|minsize|module|monotonic|msp430_intrcc|mul|musttail|naked|nand|ne|nest|ninf|nnan|noalias|noalias|nobuiltin|nocapture|noduplicate|noduplicates|noimplicitfloat|noinline|none|nonlazybind|nonnull|norecurse|noredzone|noreturn|notail|nounwind|nsw|nsz|null|nuw|oeq|oge|ogt|ole|olt|one|opaque|optnone|optsize|or|ord|personality|phippc_fp128|prefix|preserve_allcc|preserve_mostcc|private|prologue|protected|ptrtoint|ptrtoint|ptx_device|ptx_kernel|readnone|readonly|release|resume|ret|returned|returns_twice|safestack|samesize|sanitize_address|sanitize_memory|sanitize_thread|sdiv|section|select|seq_cst|sext|sge|sgt|shl|shufflevector|signext|signext|singlethread|sitofp|sitofp|sle|slt|spir_func|spir_kernel|srem|sret|ssp|sspreq|sspstrong|store|sub|switch|tail|target|thread_local|thunk|to|token|triple|true|true|trunc|trunc|type|udiv|ueq|uge|uge|ugt|ugt|uitofp|uitofp|ule|ult|umax|umin|undef|une|unnamed_addr|uno|unordered|unreachable|unwind|urem|uwtable|va_arg|void|volatile|weak|weak_odr|webkit_jscc|within|x86_64_sysvcc|x86_64_win64cc|x86_fastcallcc|x86_fp80|x86_intrcc|x86_mmx|x86_stdcallcc|x86_thiscallcc|x86_vectorcallcc|xchg|xor|xor|zeroext|zeroext|zeroinitializer|zext|zext'
        TYPE_LITERAL        =   'regexp:i\d+|half|float|double|fp128|x86_fp80|ppc_fp128|x86_mmx|opaque|void|token|label|metadata'
        DECIMAL_FPLITERAL   =   'regexp:[-+]?\d+[\.]\d*([eE][-+]?\d+)?'
        HEX_FP80LITERAL     =   'regexp:0xK[0-9A-Fa-f]+'
        HEX_FP128LITERAL    =   'regexp:0xL[0-9A-Fa-f]+'
        HEX_PPC128LITERAL   =   'regexp:0xM[0-9A-Fa-f]+'
        HEX_HALF_LITERAL    =   'regexp:0xH[0-9A-Fa-f]+'
        HEX_FPLITERAL       =   'regexp:0x[0-9A-Fa-f]+'
        INTERGER_LITERAL    =   'regexp:[+-]?\d+'
        LABEL_ID            =   'regexp:[-a-zA-Z\$\._][-a-zA-Z\$\._0-9]*\:'
        STRING              =   "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
        CHAR_ARRAY_LITERAL  =   "regexp:c{STRING}"
        COMMENT             =   "regexp:;.*"
        LOCAL_IDENTIFIER    =   "regexp:\%[-a-zA-Z\$._][-a-zA-Z\$._0-9]*|\%\d+|\%{STRING}"
        GLOBAL_IDENTIFIER   =   "regexp:\@[-a-zA-Z\$\._][-a-zA-Z._0-9]*|\@\d+|\@{STRING}"
        COMDAT_IDENTIFIER   =   "regexp:\$[a-zA-Z][-a-zA-Z0-9]*"
        METADATA_IDENTIFIER =   'regexp:\!([-a-zA-Z\$\._][-a-zA-Z\$._0-9]*|\d+)'
        ATT_GROUP_ID        =   "regexp:\#\d+"
        LEFT_PARENTHESIS    =   'regexp:\('
        RIGHT_PARENTHESIS   =   'regexp:\)'
        LEFT_BRACE          =   'regexp:\{'
        RIGHT_BRACE         =   'regexp:\}'
        LEFT_BRACKET        =   'regexp:\['
        RIGHT_BRACKET       =   'regexp:\]'
        COMMA               =   ","
        ASTERISK            =   "*"
        TIMES               =   "x"
        METADATA_STRING     =   'regexp:\!{STRING}'
        METADATA_LEFT_BRACE =   '!{'
        OPERATOR            =   "regexp:[\=]"
    ]
}

Module              ::= Entity*;


Alignment           ::= align INTERGER_LITERAL;

AddressSpace        ::= addrspace '(' INTERGER_LITERAL ')';

AtomicOrdering      ::= unordered
                    |   monotonic
                    |   acquire
                    |   release
                    |   acq_rel
                    |   seq_cst
                    ;

Argument            ::= Type ParameterAttribute* METADATA_IDENTIFIER  //todo review
                    |   Type ParameterAttribute* Value
                    ;



ArgumentList        ::= Argument(',' Argument)*;


BasicBlock          ::= (LABEL_ID)? (Statement)+
                    |   LABEL_ID
                    ;

Clause              ::= catch TypedValue
                    |   filter TypedValue
                    ;

Comdat              ::= 'comdat' ( '('  COMDAT_IDENTIFIER ')' )?;

Entity              ::= FunctionDefinition
                    |   FunctionDeclaration
                    |   'module' asm  STRING
                    |   target triple '='  STRING
                    |   target datalayout '='  STRING
                    |   deplibs '=' '[' ']'
                    |   deplibs '=' '['  STRING (','  STRING)* ']'
                    |   LOCAL_IDENTIFIER '=' 'type' Type
                    |   GLOBAL_IDENTIFIER '='   Linkage?
                                                Visibility?
                                                DllStorageClass?
                                                (thread_local ('(' ThreadLocalStorage ')')?)?
                                                unnamed_addr?
                                                AddressSpace?
                                                externally_initialized?
                                                Scope
                                                Type
                                                Value?
                                                (',' Section)?
                                                (',' Comdat)?
                                                (',' Alignment)?
                    |   GLOBAL_IDENTIFIER '='    Linkage?
                                                Visibility?
                                                DllStorageClass?
                                                (thread_local ('(' ThreadLocalStorage ')')?)?
                                                unnamed_addr?
                                                alias
                                                TypedValue
                    |   COMDAT_IDENTIFIER '=' 'comdat' SelectionKind
                    |   METADATA_IDENTIFIER '=' distinct? Metadata
                    |   attributes ATT_GROUP_ID '=' '{' FunctionAttribute* '}'
                    ;

Metadata            ::= METADATA_IDENTIFIER
                    |   METADATA_STRING
                    |   Value
                    |   TypedValue
                    |   '!{' (Metadata (',' Metadata)*)? '}'
                    ;

AddressSpace        ::= addrspace '(' INTERGER_LITERAL ')';

FunctionAttribute   ::= ATT_GROUP_ID ('{' FunctionAttribute* '}')?
                    |   alignstack INTERGER_LITERAL
                    |   alignstack '=' INTERGER_LITERAL  //attribute group format
                    |   align INTERGER_LITERAL
                    |   align '=' INTERGER_LITERAL      //attribute group format
                    |   STRING '='  STRING
                    |   alwaysinline
                    |   builtin
                    |   cold
                    |   convergent
                    |   inaccessiblememonly
                    |   inaccessiblemem_or_argmemonly
                    |   inlinehint
                    |   jumptable
                    |   minsize
                    |   naked
                    |   nobuiltin
                    |   noduplicate
                    |   noimplicitfloat
                    |   noinline
                    |   nonlazybind
                    |   noredzone
                    |   noreturn
                    |   norecurse
                    |   nounwind
                    |   optnone
                    |   optsize
                    |   readnone
                    |   readonly

                    |   argmemonly //not in c++

                    |   returns_twice
                    |   ssp
                    |   sspreq
                    |   sspstrong
                    |   safestack
                    |   sanitize_address
                    |   sanitize_thread
                    |   sanitize_memory
                    |   uwtable
                    |   thunk
                    |   STRING
                    ;

FunctionDeclaration ::= declare FunctionHeader;

FunctionDefinition  ::= define FunctionHeader FunctionBody;

FunctionHeader      ::= Linkage?
                        Visibility?
                        DllStorageClass?
                        CallingConvention?
                        ReturnAttribute*
                        Type
                        GLOBAL_IDENTIFIER
                        '(' ParameterList? ')'
                        unnamed_addr?
                        AddressSpace?
                        FunctionAttribute*
                        Section?
                        Comdat?
                        Alignment?
                        (gc  STRING)?
                        (prefix TypedValue)?
                        (prologue TypedValue)?
                        (personality TypedValue)?
                        (METADATA_IDENTIFIER METADATA_IDENTIFIER)*
                        ;

FunctionBody        ::= '{' BasicBlock+ '}';


Scope               ::= global
                    |   constant
                    ;

Instruction         ::= ret TypedValue
                    |   ret void
                    |   br TypedValue
                    |   br TypedValue ',' TypedValue ',' TypedValue
                    |   switch TypedValue ',' TypedValue '['  (TypedValue',' TypedValue)* ']'
                    |   indirectbr TypedValue ',' '[' TypedValue (',' TypedValue)* ']'
                    |   invoke
                            CallingConvention?
                            ReturnAttribute*
                            Type
                            GLOBAL_IDENTIFIER
                            '(' ArgumentList? ')'
                            FunctionAttribute*
                            ('[' OperandBundle (',' OperandBundle)* ']')?
                            to TypedValue
                            unwind TypedValue
                    |   resume TypedValue
                    |   cleanupret from Value unwind to caller
                    |   cleanupret from Value unwind TypedValue
                    |   catchret from Value to TypedValue
                    |   catchswitch within Value '[' TypedValue (',' TypedValue)* ']' unwind to caller
                    |   catchswitch within Value '[' TypedValue (',' TypedValue)* ']' unwind TypedValue
                    |   catchpad within Value '[' (TypedValue (',' TypedValue)*)? ']'
                    |   cleanuppad within Value '[' (TypedValue (',' TypedValue)*)? ']'
                    |   add nuw? nsw? Type Value ',' Value
                    |   sub nuw? nsw? Type Value ',' Value
                    |   mul nuw? nsw? Type Value ',' Value
                    |   shl nuw? nsw? Type Value ',' Value
                    |   fadd FastMathsFlag* Type Value ',' Value
                    |   fsub FastMathsFlag* Type Value ',' Value
                    |   fmul FastMathsFlag* Type Value ',' Value
                    |   fdiv FastMathsFlag* Type Value ',' Value
                    |   frem FastMathsFlag* Type Value ',' Value
                    |   sdiv exact? Type Value ',' Value
                    |   udiv exact? Type Value ',' Value
                    |   lshr exact? Type Value ',' Value
                    |   ashr exact? Type Value ',' Value
                    |   urem Type Value ',' Value
                    |   srem Type Value ',' Value
                    |   and Type Value ',' Value
                    |   or Type Value ',' Value
                    |   xor Type Value ',' Value
                    |   icmp IntPredicate Type Value ',' Value
                    |   fcmp FastMathsFlag* FPPredicate Type Value ',' Value
                    |   trunc TypedValue to Type
                    |   zext TypedValue to Type
                    |   sext TypedValue to Type
                    |   fptrunc TypedValue to Type
                    |   fpext TypedValue to Type
                    |   bitcast TypedValue to Type
                    |   addrspacecast TypedValue to Type
                    |   uitofp TypedValue to Type
                    |   sitofp TypedValue to Type
                    |   fptoui TypedValue to Type
                    |   fptosi TypedValue to Type
                    |   inttoptr TypedValue to Type
                    |   ptrtoint TypedValue to Type
                    |   select TypedValue ',' TypedValue ','TypedValue
                    |   va_arg TypedValue ',' Type
                    |   extractelement TypedValue ',' TypedValue
                    |   insertelement TypedValue ',' TypedValue ',' TypedValue
                    |   shufflevector TypedValue ',' TypedValue ',' TypedValue
                    |   phi Type '[' Value ',' Value ']' (',' '[' Value ',' Value ']')*
                    |   landingpad Type cleanup Clause*
                    |   landingpad Type Clause+
                    |   (tail| musttail|notail)? call FastMathsFlag* CallingConvention?
                            ReturnAttribute* Type Value '(' ArgumentList? ')'
                            FunctionAttribute* OperandBundle*
                    |   alloca inalloca? Type (',' TypedValue)? (',' align INTERGER_LITERAL)?
                    |   load volatile? Type ',' TypedValue (',' align INTERGER_LITERAL)?
                    |   load atomic volatile? Type ',' TypedValue singlethread? AtomicOrdering
                            (',' align INTERGER_LITERAL)?
                    |   store volatile? TypedValue ',' TypedValue (',' align INTERGER_LITERAL)?
                    |   store atomic volatile? TypedValue ',' TypedValue singlethread? AtomicOrdering
                            (',' align INTERGER_LITERAL)?
                    |   cmpxchg weak? volatile? TypedValue ',' TypedValue ',' TypedValue singlethread?
                            AtomicOrdering AtomicOrdering
                    |   atomicrmw volatile? Operation TypedValue ',' TypedValue singlethread? AtomicOrdering
                    |   fence singlethread? AtomicOrdering
                    |   getelementptr inbounds? Type ',' TypedValue (',' TypedValue)*
                    |   getelementptr inbounds? TypedValue (',' TypedValue)*
                    |   extractvalue TypedValue (',' Index)+
                    |   insertvalue TypedValue ',' TypedValue(',' Index)+
                    |   unreachable
                    ;

Operation           ::= xchg
                    |   add
                    |   sub
                    |   and
                    |   nand
                    |   or
                    |   xor
                    |   max
                    |   min
                    |   umax
                    |   umin
                    ;

OperandBundle       ::=  STRING '(' TypedValue (',' TypedValue) * ')';

Parameter           ::= Type ParameterAttribute* LOCAL_IDENTIFIER?
                    |   '...'                               //must be last
                    ;

ParameterAttribute  ::= align INTERGER_LITERAL
                    |   byval
                    |   dereferenceable '(' INTERGER_LITERAL ')'
                    |   dereferenceable_or_null '(' INTERGER_LITERAL ')'
                    |   inalloca
                    |   inreg
                    |   nest
                    |   noalias
                    |   nocapture
                    |   nonnull
                    |   readnone
                    |   readonly
                    |   returned
                    |   signext
                    |   sret
                    |   zeroext
                    |    STRING
                    ;

ParameterList       ::= Parameter (',' Parameter)*;

ReturnAttribute     ::= STRING
                    |   dereferenceable_or_null '(' INTERGER_LITERAL ')'
                    |   dereferenceable '(' INTERGER_LITERAL ')'
                    |   align INTERGER_LITERAL
                    |   inreg
                    |   noalias
                    |   nonnull
                    |   signext
                    |   zeroext
                    ;

Section             ::= 'section'  STRING;

SelectionKind       ::= any
                    |   exactmatch
                    |   largest
                    |   noduplicates
                    |   samesize
                    ;

Statement           ::= (LOCAL_IDENTIFIER '=')? Instruction (',' METADATA_IDENTIFIER Metadata)*;

Type                ::= PrimitiveType
                    |   UserDefinedType
                    |   ArrayType
                    |   StructureType
                    |   PackedStructureType
                    |   VectorType
                    |   PointerType
                    |   FunctionType
                    |   AddressSpaceType
                    ;

PrimitiveType       ::= TYPE_LITERAL;

UserDefinedType     ::= LOCAL_IDENTIFIER;

ArrayType           ::= '[' INTERGER_LITERAL 'x' Type ']';

StructureType       ::= '{' (Type (',' Type)*)? '}';

PackedStructureType ::= '<' ('{'  Type (',' Type)* '}')? '>';

VectorType          ::= '<' INTERGER_LITERAL 'x' Type '>';

PointerType         ::= Type '*';

FunctionType        ::= Type '(' (Type ',')* (Type|'...')? ')';

AddressSpaceType    ::= Type addrspace '(' INTERGER_LITERAL ')' '*';

TypedValue          ::= Type Value;

Value               ::= GLOBAL_IDENTIFIER
                    |   LOCAL_IDENTIFIER
                    |   FloatLiteral
                    |   INTERGER_LITERAL
                    |   CHAR_ARRAY_LITERAL
                    |   true
                    |   false
                    |   null
                    |   undef
                    |   zeroinitializer
                    |   none
                    |   '{' TypedValue (',' TypedValue)* '}'
                    |   '<' TypedValue (',' TypedValue)* '>'
                    |   '[' TypedValue (',' TypedValue)* ']'
                    |   asm sideeffect? alignstack? inteldialect?  STRING ','  STRING
                    |   blockaddress '(' GLOBAL_IDENTIFIER ',' LOCAL_IDENTIFIER ')'
                    |   trunc '(' TypedValue 'to' Type ')'
                    |   zext '(' TypedValue 'to' Type ')'
                    |   sext '(' TypedValue 'to' Type ')'
                    |   fptrunc '(' TypedValue 'to' Type ')'
                    |   fpext '(' TypedValue 'to' Type ')'
                    |   bitcast '(' TypedValue 'to' Type ')'
                    |   addrspacecast '(' TypedValue 'to' Type ')'
                    |   uitofp '(' TypedValue 'to' Type ')'
                    |   sitofp '(' TypedValue 'to' Type ')'
                    |   fptoui '(' TypedValue 'to' Type ')'
                    |   inttoptr '(' TypedValue 'to' Type ')'
                    |   ptrtoint '(' TypedValue 'to' Type ')'
                    |   insertvalue '(' Value ',' Value (',' Index )+ ')'
                    |   icmp IntPredicate '(' TypedValue ',' TypedValue ')'
                    |   fcmp FPPredicate '(' TypedValue ',' TypedValue ')'
                    |   fadd '(' TypedValue ',' TypedValue  ')'
                    |   fsub '(' TypedValue ',' TypedValue  ')'
                    |   add nuw? nsw? '(' TypedValue ',' TypedValue  ')'
                    |   sub nuw? nsw? '(' TypedValue ',' TypedValue  ')'
                    |   mul nuw? nsw? '(' TypedValue ',' TypedValue  ')'
                    |   shl nuw? nsw? '(' TypedValue ',' TypedValue  ')'
                    |   fmul '(' TypedValue ',' TypedValue  ')'
                    |   udiv '(' TypedValue ',' TypedValue  ')'
                    |   sdiv '(' TypedValue ',' TypedValue  ')'
                    |   fdiv '(' TypedValue ',' TypedValue  ')'
                    |   urem '(' TypedValue ',' TypedValue  ')'
                    |   srem '(' TypedValue ',' TypedValue  ')'
                    |   frem '(' TypedValue ',' TypedValue  ')'
                    |   lshl '(' TypedValue ',' TypedValue  ')'
                    |   ashr '(' TypedValue ',' TypedValue  ')'
                    |   and '(' TypedValue ',' TypedValue  ')'
                    |   or '(' TypedValue ',' TypedValue  ')'
                    |   xor '(' TypedValue ',' TypedValue  ')'

                    |   getelementptr inbounds? '(' Type ',' TypedValue (',' TypedValue)* ')'
                    |   getelementptr inbounds? '(' TypedValue (',' TypedValue)* ')'
                    |   shufflevector '(' TypedValue ',' TypedValue ',' TypedValue ')'
                    |   insertelement '(' TypedValue ',' TypedValue ',' TypedValue ')'
                    |   extractelement '(' TypedValue ',' TypedValue ')'
                    |   select '(' TypedValue ',' TypedValue ','TypedValue ')'
                    ;

Index               ::= INTERGER_LITERAL
                    |   METADATA_IDENTIFIER
                    ;

CallingConvention   ::= ccc
                    |   fastcc
                    |   coldcc
                    |   x86_stdcallcc
                    |   x86_fastcallcc
                    |   x86_thiscallcc
                    |   x86_vectorcallcc
                    |   arm_apcscc
                    |   arm_aapcscc
                    |   arm_aapcs_vfpcc
                    |   msp430_intrcc
                    |   ptx_kernel
                    |   ptx_device
                    |   spir_kernel
                    |   spir_func
                    |   intel_ocl_bicc
                    |   x86_64_sysvcc
                    |   x86_64_win64cc
                    |   webkit_jscc
                    |   anyregcc
                    |   preserve_mostcc
                    |   preserve_allcc
                    |   ghccc
                    |   x86_intrcc
                    |   hhvmcc
                    |   hhvm_ccc
                    |   cxx_fast_tlscc
                    |   cc digit+
                    ;

Linkage             ::= private
                    |   internal
                    |   weak_odr
                    |   weak
                    |   linkonce
                    |   linkonce_odr
                    |   available_externally
                    |   appending
                    |   common
                    |   extern_weak
                    |   external
                    ;

DllStorageClass     ::= dllimport
                    |   dllexport
                    ;


Visibility          ::= default
                    |   hidden
                    |   protected
                    ;

ThreadLocalStorage  ::= localdynamic
                    |   initialexec
                    |   localexec
                    ;

FPPredicate         ::= oeq
                    |   one
                    |   olt
                    |   ogt
                    |   ole
                    |   oge
                    |   ord
                    |   uno
                    |   ueq
                    |   une
                    |   ult
                    |   ugt
                    |   ule
                    |   uge
                    |   true
                    |   false
                    ;

IntPredicate        ::= eq
                    |   ne
                    |   ugt
                    |   uge
                    |   ult
                    |   ule
                    |   sgt
                    |   sge
                    |   slt
                    |   sle
                    ;

FloatLiteral        ::= HEX_FPLITERAL
                    |   HEX_FP80LITERAL
                    |   HEX_FP128LITERAL
                    |   HEX_PPC128LITERAL
                    |   HEX_HALF_LITERAL
                    |   DECIMAL_FPLITERAL
                    ;

FastMathsFlag       ::= fast
                    |   nnan
                    |   ninf
                    |   nsz
                    |   arcp
                    ;
